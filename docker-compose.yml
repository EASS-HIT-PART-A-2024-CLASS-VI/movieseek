services:
  db:
    image: mysql:8.0
    container_name: mysql_container
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DB_NAME}
      - MYSQL_USER=${DB_USER}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_LOG_CONSOLE=1  # ✅ Enable log control
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - app-network
    command: mysqld --log-error-verbosity=1  # ✅ Reduce log verbosity
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      retries: 5
      timeout: 5s

  tmdb_service:
    build: ./microservices/tmdb
    image: my-tmdb-service:latest
    container_name: tmdb_service_container
    ports:
      - "8001:8001"
    environment:
      - TMDB_API_KEY=${TMDB_API_KEY}
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy  # ✅ Ensures MySQL is fully ready before TMDB starts

  api:
    build: ./backend
    image: my-fastapi-app:latest
    container_name: fastapi_container
    ports:
      - "8000:8000"
    env_file:
      - .env  # ✅ Load environment variables
    volumes:
      - ./backend:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy  # ✅ Ensures MySQL is fully ready before FastAPI starts
      tmdb_service:
        condition: service_started  # ✅ Ensures TMDB service starts before FastAPI

  frontend:
    build:
      context: ./frontend
    image: my-react-app:latest
    container_name: react_frontend
    ports:
      - "3000:3000"
    networks:
      - app-network
    depends_on:
      api:
        condition: service_started  # ✅ Ensures FastAPI is running before frontend starts


  pytest:
    build: ./backend
    image: my-fastapi-app:latest
    container_name: pytest_container
    depends_on:
      db:
        condition: service_healthy  # ✅ Ensures MySQL is ready before running tests
      tmdb_service:
        condition: service_started  # ✅ Ensures TMDB microservice is running
    volumes:
      - .:/app
    environment:
      - PYTHONPATH=/app/backend:/app/microservices/tmdb
      - PASSLIB_DEFAULT_SCHEME=bcrypt  # ✅ Force bcrypt, disable crypt
    env_file:
      - .env
    command: pytest
    networks:
      - app-network
    profiles:
      - test  # ✅ Only runs if explicitly called

volumes:
  db_data:

networks:
  app-network:
    driver: bridge
