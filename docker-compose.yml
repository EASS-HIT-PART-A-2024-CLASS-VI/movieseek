
services:
  api:
    build: ./backend
    image: my-fastapi-app:latest
    container_name: fastapi_container
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy  # ✅ Waits for MySQL to be ready
      omdb_service: 
        condition: service_started  # ✅ Ensures OMDB starts first
    env_file:
      - .env  # Path to the .env file in the 'backend' directory
    volumes:
      - ./backend:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000
    networks:
      - app-network

  omdb_service:
    build: ./microservices/omdb
    image: my-omdb-service:latest
    container_name: omdb_service_container
    ports:
      - "8001:8001"
    environment:
      - OMDB_API_KEY=${OMDB_API_KEY}  # Correct env variable
    networks:
      - app-network

  pytest:
    build: ./backend
    image: my-fastapi-app:latest
    container_name: pytest_container
    depends_on:
      db:
        condition: service_healthy  # ✅ Ensures MySQL is ready before running tests
      omdb_service:
        condition: service_started  # ✅ Ensures OMDB is running
    volumes:
      - .:/app
    environment:
      - PYTHONPATH=/app/backend:/app/microservices/omdb
      - PASSLIB_DEFAULT_SCHEME=bcrypt  # Force bcrypt, disable crypt
    env_file:
      - .env
    command: pytest
    networks:
      - app-network

  db:
    image: mysql:8.0
    container_name: mysql_container
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DB_NAME}
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - app-network
    healthcheck:  # ✅ Added health check for MySQL readiness
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      retries: 5
      timeout: 5s

  frontend:
    build:
      context: ./frontend
    image: my-react-app:latest
    container_name: react_frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app  # Mount local directory to container for live updates
      - /app/node_modules  # Prevents conflicts between local and container dependencies
    command: npm start
    networks:
      - app-network
    depends_on:
      api:
        condition: service_started  # ✅ Ensures API is running before frontend starts

volumes:
  db_data:

networks:
  app-network:
    driver: bridge
